(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4200],{28697:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hierarchical-edge-bundling",function(){return a(25797)}])},25797:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return g}});var i=a(85893),r=a(67294),t=a(80153),s=a(43710),d=a(61651),l=a(3572),o=a(81122),h=a(33623),c=a(41664),u=a.n(c),m=a(56438);let p={type:"node",name:"boss",value:0,children:[{type:"node",name:"Team Dataviz",value:0,children:[{type:"leaf",name:"Mark",value:90,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Robert",value:12,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Emily",value:34,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Marion",value:53,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Edy",value:53,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Gab",value:53,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Yan",value:53,links:["Robert","Emily","Marion","Malki","Einstein"]}]},{type:"node",name:"Team DevOps",value:0,children:[{type:"leaf",name:"Nicolas",value:98,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Malki",value:22,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Dj\xe9",value:12,links:["Robert","Einstein"]},{type:"leaf",name:"Joe",value:12,links:["Robert","Einstein"]},{type:"leaf",name:"Karl",value:12,links:["Joe","Mam"]},{type:"leaf",name:"Mam",value:12,links:["Karl"]},{type:"leaf",name:"Toto",value:12,links:["Karl"]},{type:"leaf",name:"Tuck",value:12,links:["Yam"]},{type:"leaf",name:"Yam",value:12,links:["Toto","Karl"]}]},{type:"node",name:"Team Sales",value:0,children:[{type:"leaf",name:"M\xe9lanie",value:45,links:["Robert","Emily","Marion","Malki","Einstein"]},{type:"leaf",name:"Einstein",value:76,links:["Robert","Emily","Marion","Malki","Einstein"]}]}]};var x=a(52604);let f=e=>{let{width:n,height:a,data:t}=e,s=(0,r.useMemo)(()=>x.bT9(t).sum(e=>e.value),[t]),d=Math.min(n,a)/2-80,l=(0,r.useMemo)(()=>{let e=x.ki8().size([360,d]).separation((e,n)=>e.parent==n.parent?1:6);return e(s)},[s,n,a]),o=l.descendants().filter(e=>"leaf"===e.data.type).map(e=>{let n=e.x>180;return(0,i.jsxs)("g",{transform:"rotate("+(e.x-90)+")translate("+e.y+")",children:[(0,i.jsx)("circle",{cx:0,cy:0,r:5,stroke:"transparent",fill:"#69b3a2"}),!e.children&&(0,i.jsx)("text",{x:n?-15:15,y:0,fontSize:12,textAnchor:n?"end":"start",transform:n?"rotate(180)":"rotate(0)",alignmentBaseline:"middle",children:e.data.name})]},e.id)}),h=x.XBu().radius(e=>e.y).angle(e=>e.x/180*Math.PI).curve(x.tFB.beta(.95)),c={};l.descendants().map(e=>{c[e.data.name]=e});let u=l.descendants().filter(e=>"leaf"===e.data.type&&e.data.links.length>0).map((e,n)=>e.data.links.map(a=>{let r=e.path(c[a]),t=r.map(e=>({x:e.x,y:e.y}));return(0,i.jsx)("path",{fill:"none",stroke:"grey",d:h(t)},n)}));return(0,i.jsx)("div",{children:(0,i.jsx)("svg",{width:n,height:a,children:(0,i.jsxs)("g",{transform:"translate("+(d+80)+","+(d+80)+")",children:[u,o]})})})},j=e=>{let{width:n=700,height:a=400}=e;return(0,i.jsx)(f,{data:p,width:n,height:a})},b=(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("p",{children:["A"," ",(0,i.jsx)("a",{href:"https://www.data-to-viz.com/graph/edge_bundling.html",children:"hierarchical edge bundling"})," ","chart allows to visualize ",(0,i.jsx)("b",{children:"relationships"})," between entities organized in a ",(0,i.jsx)("b",{children:"hierarchy"}),". The idea is to ",(0,i.jsx)("b",{children:"bundle"})," the adjacency edges together to decrease the clutter usually observed in complex networks."]}),(0,i.jsxs)("p",{children:["This page explains how to build a hierarchical edge bundling chart using"," ",(0,i.jsx)("b",{children:"d3.js"})," to compute the node position, and ",(0,i.jsx)("b",{children:"React"})," to render the nodes and edges. It starts by describing the required ",(0,i.jsx)("b",{children:"data"})," format, explains how to build a very ",(0,i.jsx)("b",{children:"basic"})," hierarchical edge bundling and then shows how to ",(0,i.jsx)("b",{children:"customize"})," it."]})]});function g(){return(0,i.jsxs)(t.A,{title:"Hierarchical Edge Bundling | React Graph Gallery",seoDescription:"How to build a hierarchical edge bundling chart with React and D3.js. A set of re-usable components with explanation and code.",children:[(0,i.jsx)(s.Z,{title:"Hierarchical edge bundling",description:b,chartType:"edgeBundling"}),(0,i.jsx)("h2",{id:"data",children:"The Data"})," ",(0,i.jsxs)("p",{children:["The dataset describes a ",(0,i.jsx)("b",{children:"hierarchy"})," using a ",(0,i.jsx)("b",{children:"recursive"})," ","structure."]}),(0,i.jsxs)("p",{children:["Each item in this structure is called a ",(0,i.jsx)("b",{children:"node"}),". The lowest nodes of the hierarchy being called ",(0,i.jsx)("b",{children:"leaves"}),"."," "]}),(0,i.jsxs)("p",{children:["The dataset is an object that has at least 3 properties:"," ",(0,i.jsx)("code",{children:"name"}),", ",(0,i.jsx)("code",{children:"value"})," and ",(0,i.jsx)("code",{children:"children"}),"."," ",(0,i.jsx)("code",{children:"children"})," is an array of nodes that have this structure too."]}),(0,i.jsxs)("p",{children:["This kind of data is very close to what's required for a"," ",(0,i.jsx)(u(),{href:"/dendrogram",children:"dendrogram"}),". But an additional property is added for the leaves: ",(0,i.jsx)("code",{children:"links"}),". It provides a list of all the other leaves this leaf is connected with."]}),(0,i.jsx)("p",{children:"Here is a minimal example of the data structure:"}),(0,i.jsx)(l.d,{code:y}),(0,i.jsxs)("p",{children:[(0,i.jsx)("u",{children:"Note"}),": if your data is not formatted this way at all, don't fret! I provide explanation on how to reach this format from other common formats ",(0,i.jsx)(u(),{href:"/dendrogram#hierarchy",children:"here"}),"."]}),(0,i.jsx)("h2",{id:"hierarchy",children:'The hierarchy format or "root node"'}),(0,i.jsxs)("p",{children:["A hierarchical edge bundling chart is a ",(0,i.jsx)("b",{children:"hierarchical layout"}),"."]}),(0,i.jsxs)("p",{children:["D3.js has a lot of"," ",(0,i.jsx)("a",{href:"https://github.com/d3/d3-hierarchy",children:"utility functions"})," ","allowing to deal with this kind of hierarchical data. To use those functions we first need to create a ",(0,i.jsx)("b",{children:'"Root node"'})," or"," ",(0,i.jsx)("b",{children:'"Hierarchy"'}),"."]}),(0,i.jsxs)("p",{children:["This is possible thanks to the ",(0,i.jsx)("code",{children:"hierarchy"})," function of d3, and I extensively described the process in the"," ",(0,i.jsx)(u(),{href:"/dendrogram",children:"dendrogram section"})," of this gallery."]}),(0,i.jsx)(l.d,{code:v}),(0,i.jsx)("p",{children:"Once this is done, we have a js object that will be very convenient to manipulate to create our chart."}),(0,i.jsx)(m.J,{isFilled:!0,size:"sm",href:"/dendrogram#hierarchy",children:"More explanation"}),(0,i.jsxs)("h2",{id:"cluster",children:["The ",(0,i.jsx)("code",{children:"cluster()"})," function"]}),(0,i.jsxs)("p",{children:["We now have a ",(0,i.jsx)("code",{children:"hierarchy"})," object that is a convenient data structure. From this, we need to compute the position of each node in our ",(0,i.jsx)("b",{children:"2d space"}),"."]}),(0,i.jsxs)("p",{children:["This is made possible thanks to the ",(0,i.jsx)("code",{children:"cluster()"})," function of d3.js. You can check its"," ",(0,i.jsx)("a",{href:"https://github.com/d3/d3-hierarchy#cluster",children:"offical documentation"}),"."]}),(0,i.jsxs)("p",{children:["The work done here is exactly the same as for a ",(0,i.jsx)("b",{children:"radial dendrogram"}),", so I suggest to follow the ",(0,i.jsx)(u(),{href:"/dendrogram",children:"dendrogram"})," ","page for more in-depth explanation."]}),(0,i.jsx)(l.d,{code:k}),(0,i.jsxs)("p",{children:["The output is almost the same as the initial ",(0,i.jsx)("b",{children:"hierarchy"})," object. But for each node we have 2 additional properties: ",(0,i.jsx)("code",{children:"x"})," and"," ",(0,i.jsx)("code",{children:"y"})," that are the coordinates we need to build the dendrogram!"]}),(0,i.jsx)("h2",{id:"Radial dendrogram",children:"Radial dendrogram"}),(0,i.jsxs)("p",{children:["Once more, it is crucial to understand that a hierarchical edge bundling starts with the layout of a ",(0,i.jsx)("b",{children:"radial dendrogram"}),"."]}),(0,i.jsx)("p",{children:"To understand how to deal with polar coordinates and how to draw clean circular labels, please visit the dendrogram and the circular barplot sections. \uD83D\uDC47"}),(0,i.jsxs)("div",{className:"flex",children:[(0,i.jsx)(m.J,{href:"/circular-barplot",size:"sm",children:"Circular barplot"})," ",(0,i.jsx)(m.J,{href:"/dendrogram",isFilled:!0,size:"sm",children:"Dendrogram"})]}),(0,i.jsx)("p",{children:(0,i.jsx)("br",{})}),(0,i.jsx)("p",{children:"If you are in your confort zone here, you can also just read the code directly"}),(0,i.jsx)(o.$,{vizName:"DendrogramRadial",VizComponent:h.X,maxWidth:600,height:600,caption:"A minimalist radial dendrogram built using d3 and react."}),(0,i.jsx)("h2",{id:"Links",children:"Hierarchical edge bundling"}),(0,i.jsxs)("p",{children:["The last but trickiest part of our graph creation is to draw the"," ",(0,i.jsx)("b",{children:"links"})," between leaves."]}),(0,i.jsxs)("h3",{children:["→ Drawing curves with ",(0,i.jsx)("code",{children:"d3.curveBundle"})]}),(0,i.jsxs)("p",{children:["We need a specific way to draw connections using curves. It can be done as follow. ",(0,i.jsx)("code",{children:"BUNDLE_COEFF"})," is a value between 0 and 1, 0 beeing a straight line and 1 being more influenced by dots on the path."]}),(0,i.jsx)(l.d,{code:w}),(0,i.jsx)("h3",{children:"→ Find the path from leaf to leaf"}),(0,i.jsxs)("p",{children:["We want to draw a connection between a leaf to another, passing through all the common ancestors. It is possible to find the list of nodes to traverse thanks to the ",(0,i.jsx)("code",{children:"path()"})," method attached to a node!"]}),(0,i.jsx)("p",{children:"Here is the whole pipeline with comments:"}),(0,i.jsx)(l.d,{code:E}),(0,i.jsx)("p",{children:"Resulting in our first hierarchical edge bundling example \uD83C\uDF89"}),(0,i.jsx)(o.$,{vizName:"HierarchicalEdgeBundlingBasic",VizComponent:j,maxWidth:600,height:600,caption:"A first hierarchical edge bundling chart made with d3 and react."}),(0,i.jsx)("h2",{id:"next",children:"Coming soon"}),(0,i.jsxs)("p",{children:["Using ",(0,i.jsx)("code",{children:"canvas"})," for rendering is often a requirement when the number of nodes gets big. ",(0,i.jsx)("b",{children:"Interactivity"})," is often necessary, for"," ",(0,i.jsx)("b",{children:"hover effect"})," or to ",(0,i.jsx)("b",{children:"collapse"})," a part of the tree. It also possible to ",(0,i.jsx)("b",{children:"map"})," the node circle size to a numeric variable."]}),(0,i.jsxs)("p",{children:["This will come soon! I have a newsletter called the"," ",(0,i.jsx)(u(),{href:"/subscribe",children:"dataviz universe"})," where I share my latest updates."]}),(0,i.jsx)(m.J,{href:"/subscribe",children:"Subscribe"}),(0,i.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 my-3 mt-20"}),(0,i.jsx)(d.Z,{chartFamily:"flow"}),(0,i.jsx)("div",{className:"mt-20"})]})}let y="\nconst data = {\n  type: 'node',\n  name: \"boss\",\n  value: 2300,\n  children: [\n    {type: 'leaf', name:\"Mark\", value: 90, links: ['Robert', 'Emily']},\n    {type: 'leaf', name:\"Robert\", value: 12, links: ['Emily']},\n    {type: 'leaf', name:\"Emily\", value: 34, links: []},\n    ...\n}\n".trim(),v="\nconst hierarchy = useMemo(() => {\n  return d3.hierarchy(data);\n}, [data]);\n".trim(),k="\nconst dendrogramGenerator = d3\n      .cluster<Tree>()\n      .size([360, radius])\n\nconst dendrogram = dendrogramGenerator(hierarchy);\n".trim(),w="\nconst linksGenerator = d3\n  .lineRadial()\n  .radius((d) => d.y)\n  .angle((d) => (d.x / 180) * Math.PI)\n  .curve(d3.curveBundle.beta(BUNDLE_COEFF));\n".trim(),E='\n// Compute a map from name to node.\nlet nameToNodeMap = {};\ndendrogram.descendants().map((node) => {\n  nameToNodeMap[node.data.name] = node;\n});\n\n// Draw connections\nconst allEdges = dendrogram\n  .descendants() // find all nodes of the tree\n  .filter((node) => node.data.type === "leaf" && node.data.links.length > 0) // keep only leaves that have links\n  .map((sourceNode, i) => {\n    return sourceNode.data.links.map((targetNodeName: string) => { // Loop through all the links we need to draw\n      const traversedNodes = sourceNode.path(nameToNodeMap[targetNodeName]); // The path function provides a list of all the nodes we need to traverse from source to target!\n\n      const traversedCoords = traversedNodes.map((node) => { // Find the coordinates of all nodes on the way\n        return { x: node.x, y: node.y };\n      });\n\n      return (\n        <path\n          key={i}\n          fill="none"\n          stroke="grey"\n          d={linksGenerator(traversedCoords)} // transform the list of coordinates to an SVG path\n        />\n      );\n    });\n  });\n'.trim()}},function(e){e.O(0,[2343,7754,2604,7823,8190,3710,2594,9041,9774,2888,179],function(){return e(e.s=28697)}),_N_E=e.O()}]);