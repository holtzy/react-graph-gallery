(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2406],{31447:function(e,t,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/generative/intro-to-perlin-noise",function(){return i(30193)}])},30193:function(e,t,i){"use strict";i.r(t),i.d(t,{default:function(){return m}});var n=i(85893),s=i(67294),o=i(80153),r=i(43710),l=i(61651),a=i(3572),h=i(81122),c=i(77048),d=i(72313);let u=e=>{let{width:t,height:i}=e,o=(0,s.useRef)(null),r=(0,d.BYU)().range([i,0]).domain([-1,1]),l=(0,s.useMemo)(()=>(0,c.hA)(),[]);return(0,s.useEffect)(()=>{let e=function(e,t,i){if(!e)return null;let n=window.devicePixelRatio||1;e.width=t*n,e.height=i*n,e.style.width="".concat(t,"px"),e.style.height="".concat(i,"px");let s=e.getContext("2d");return s&&(s.setTransform(1,0,0,1,0,0),s.scale(n,n)),s}(o.current,t,i);if(e){e.clearRect(0,0,t,i),e.fillStyle="#ebf4fa",e.fillRect(0,0,t,i),e.globalAlpha=1,e.lineWidth=2,e.beginPath();for(let i=0;i<t;i+=1){let t=l(.01*i,0),n=r(t);e.lineTo(i,n)}e.stroke()}},[t,i]),(0,n.jsx)("canvas",{ref:o,style:{display:"block",width:t,height:i}})},p=e=>{let{width:t=700,height:i=400}=e;return(0,n.jsx)(u,{width:t,height:i})},f=e=>{let{width:t,height:i}=e,o=(0,s.useRef)(null),[r,l]=(0,s.useState)(.04),a=(0,d.BYU)().range([i,0]).domain([-1,1]),h=(0,s.useMemo)(()=>(0,c.hA)(),[]);return(0,s.useEffect)(()=>{let e=function(e,t,i){if(!e)return null;let n=window.devicePixelRatio||1;e.width=t*n,e.height=i*n,e.style.width="".concat(t,"px"),e.style.height="".concat(i,"px");let s=e.getContext("2d");return s&&(s.setTransform(1,0,0,1,0,0),s.scale(n,n)),s}(o.current,t,i);if(e){e.clearRect(0,0,t,i),e.fillStyle="#ebf4fa",e.fillRect(0,0,t,i),e.globalAlpha=1,e.lineWidth=2,e.beginPath();for(let i=0;i<t;i+=1){let t=h(i*r,0),n=a(t);e.lineTo(i,n)}e.stroke()}},[t,i,r]),(0,n.jsxs)("div",{className:"relative",children:[(0,n.jsx)("input",{className:"absolute",type:"range",min:.001,max:.1,value:r,step:.001,onChange:e=>l(Number(e.target.value)),style:{height:2,opacity:.5}}),(0,n.jsx)("canvas",{ref:o,style:{display:"block",width:t,height:i}})]})},x=e=>{let{width:t=700,height:i=400}=e;return(0,n.jsx)(f,{width:t,height:i})},g=(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("p",{children:"Perlin noise is a foundational concept in generative art, enabling the creation of organic, natural-looking randomness. Let’s explore what Perlin noise is, how it works in one dimension, and how you can use it in React."})});function m(){return(0,n.jsxs)(o.A,{title:"Intro to perlin noise with React",seoDescription:"Intro to perlin noise with React",children:[(0,n.jsx)(r.Z,{title:(0,n.jsx)("h1",{children:"Intro to Perlin noise"}),description:g,chartType:"generative"}),(0,n.jsx)("h2",{id:"Definition",children:"What is Perlin Noise?"}),(0,n.jsx)("p",{children:"Perlin noise is a technique for generating smooth, pseudo-random values. It’s the secret behind many beautiful, naturally varying shapes and textures in generative art and computer graphics."}),(0,n.jsx)("p",{children:"If you want a fantastic introduction, check out this video by The Coding Train—it explains Perlin noise better than words alone ever could!"}),(0,n.jsx)("iframe",{src:"https://www.youtube.com/embed/Qf4dIN99e2w",title:"Intro to perlin noise by the coding train",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,n.jsx)("p",{children:"Now, let’s see how to implement a simple Perlin noise example in React."}),(0,n.jsx)("h2",{id:"noise function",children:"React Implementation"}),(0,n.jsxs)("p",{children:["There’s a handy JavaScript library for Perlin noise called"," ",(0,n.jsx)("a",{href:"https://github.com/jwagner/simplex-noise.js",target:"_blank",children:"simplex-noise"}),"."]}),(0,n.jsxs)("p",{children:["This library provides a ",(0,n.jsx)("code",{children:"createNoise2D"})," function, which generates 2D Perlin noise. The first argument is the “offset”—the position where you sample the noise. If you use two nearby offsets, the resulting values will also be close, creating smooth transitions."]}),(0,n.jsx)("p",{children:"To simulate 1D Perlin noise, simply pass zero as the second argument."}),(0,n.jsx)(a.d,{code:"\nconst noise = createNoise2D();\n\nnoise(4, 0)       // returns 0.5\nnoise(4.00001, 0) // returns 0.5001\n\nnoise(10, 0)      // returns -0.4\n".trim()}),(0,n.jsxs)("p",{children:["For best results, create the noise generator inside a"," ",(0,n.jsx)("code",{children:"useMemo"})," hook. This ensures the generator isn’t recreated on every render, so you get consistent noise values each time your component updates."]}),(0,n.jsx)("h2",{id:"plot",children:"Visualizing Perlin Noise"}),(0,n.jsx)("p",{children:"Let’s loop through every pixel along the width of our chart—these will be our x-values."}),(0,n.jsxs)("p",{children:["For each pixel, we’ll calculate the corresponding noise value by incrementing the x offset by 0.01 each time. For example:"," ",(0,n.jsx)("code",{children:"noise(0, 0)"})," for the first pixel,"," ",(0,n.jsx)("code",{children:"noise(0.01, 0)"})," for the next, ",(0,n.jsx)("code",{children:"noise(0.02, 0)"})," ","for the third, and so on. The output ranges from -1 to 1, which we’ll plot on the y-axis."]}),(0,n.jsx)("p",{children:"(Tip: Experiment with the x offset to see how it affects the smoothness of the noise!)"}),(0,n.jsx)(h.$,{vizName:"GenArtIntroPerlin",VizComponent:p,maxWidth:500,height:500,caption:(0,n.jsx)("span",{children:"Simple Perlin noise visualization"})}),(0,n.jsx)("h2",{id:"slider",children:"Play with the X Offset"}),(0,n.jsx)("p",{children:"Now, let’s add some interactivity! We’ll again loop through all the pixels along the width, using each as an x-value for our line chart."}),(0,n.jsx)("p",{children:"For each pixel, we’ll compute its noise value (between -1 and 1) and plot it on the y-axis. Try adjusting the x offset to see how the pattern shifts and evolves."}),(0,n.jsx)("p",{children:"(Notice how changing the x offset changes the “texture” of the noise—this is a powerful tool for generative art!)"}),(0,n.jsx)(h.$,{vizName:"GenArtIntroPerlinSlider",VizComponent:x,maxWidth:500,height:500,caption:(0,n.jsx)("span",{children:"Basic Perlin noise"})}),(0,n.jsx)("p",{children:"Here’s a suggestion for how you might implement this:"}),(0,n.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,n.jsx)(l.Z,{chartFamily:"distribution"}),(0,n.jsx)("div",{className:"mt-20"})]})}}},function(e){e.O(0,[2343,7754,2313,7823,8190,3710,2594,3822,9774,2888,179],function(){return e(e.s=31447)}),_N_E=e.O()}]);