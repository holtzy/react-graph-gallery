(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2990],{64925:function(e,t,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/ridgeline",function(){return i(30444)}])},52450:function(e,t,i){"use strict";i.d(t,{Z:function(){return o}});var n=i(85893);i(67294);var s=i(92050),r=i(49975),a=i(59942);function o(e){let{images:t}=e,i=s.F.filter(e=>t.includes(e.img)).map((e,t)=>(0,n.jsx)(r.X,{link:e.link,title:e.title,description:(0,n.jsx)("p",{children:e.description}),img:e.img,alt:e.alt},t));return(0,n.jsx)(a.E,{children:i})}},30444:function(e,t,i){"use strict";i.r(t),i.d(t,{default:function(){return k}});var n=i(85893),s=i(67294),r=i(80153),a=i(43710),o=i(61651),l=i(3572),h=i(81122),d=i(41664),c=i.n(d);let p=[{key:"Almost Certainly",values:[95,95,95,95,98,95,85,97,95,90,90,99,60,88.7,99,95,97,99,95,95,90,92,98,98,90,95,95,98,85,80,98,96,99,85,90,95,98,98,80,95,99,85,90,95,85,95]},{key:"Highly Likely",values:[80,75,85,85,95,99,95,95,95,85,90,97,80,69,98,90,90,95,95,90,80,85,90,92,90,85,90,95,85,15,80,85,85,84,95,85,96,96,90,90,90,80,70,80,90,80]},{key:"Very Good Chance",values:[85,75,85,85,80,85,65,75,80,90,85,70,70,80,85,80,70,75,90,75,80,75,75,91,75,80,80,75,90,74,75,80,75,87,80,80,90,82,70,90,80,80,80,90,75,75]},{key:"Probable",values:[75,51,70,70,70,90,80,70,70,70,70,75,70,51,85,70,51,60,60,80,75,60,80,85,75,75,60,85,60,65,65,75,80,50,70,64,90,75,80,80,90,70,75,75,65,75]},{key:"Likely",values:[66,75,75,75,70,75,40,70,65,75,60,75,60,70,75,70,65,65,80,75,80,70,85,85,65,65,75,90,65,65,70,70,75,60,90,80,90,86,80,90,60,70,70,70,65,60]},{key:"Probably",values:[75,51,70,70,75,75,45,80,80,70,75,75,55,60,65,80,60,75,75,75,75,60,85,85,80,75,60,85,76,65,55,90,90,65,60,80,80,80,80,90,50,70,65,75,60,68]},{key:"We Believe",values:[66,51,80,80,65,80,80,75,65,65,80,90,60,50,5,85,75,80,75,50,60,85,85,70,80,50,60,75,50,60,60,80,50,50,60,75,70,45,70,85,90,65,70,100,95,55]},{key:"Better Than Even",values:[55,51,60,60,60,65,60,55,55,60,60,67,55,5,65,60,51,55,60,50.1,60,57,60,60,60,60,51,98,51,60,55,60,51,60,80,80,53,69,60,55,60,51,60,60,55,51]},{key:"About Even",values:[50,50,50,50,50,50,45,50,50,52,50,50,50,50,50,50,50,50,50,50,50,50,49,50,50,50,50,50,50,50,50,50,50,50,40,50,50,52,50,48,50,45,50,50,50,49]},{key:"We Doubt",values:[40,20,30,30,10,7,45,25,20,60,25,17,20,30,100,30,5,25,25,25,40,25,5,30,12,33,10,40,33,38,25,5,1,60,25,10,40,21,10,15,40,30,15,10,95,25]},{key:"Improbable",values:[20,49,10,10,50,15,35,30,30,20,1,10,5,49,1,40,10,3,10,20,30,33,15,7,25,10,49,7,25,29,20,9,.001,3,3,10,4,12,0,20,20,15,35,5,5,20]},{key:"Unlikely",values:[30,25,25,25,5,8,20,15,35,30,15,10,30,20,10,30,15,15,10,25,10,10,2,18,35,25,20,10,25,36,12,3,10,24,5,25,30,34,20,35,10,35,20,10,20,35]},{key:"Probably Not",values:[15,49,25,25,20,15,40,25,35,45,40,25,30,40,100,40,10,30,20,49.9,25,10,10,27,30,25,40,25,20,34,35,20,10,30,20,20,30,26,30,15,40,30,25,20,40,40]},{key:"Little Chance",values:[20,5,20,20,5,5,20,20,15,20,20,17,10,13,100,15,15,10,25,25,20,7,2,17,20,10,15,10,10,29,15,20,5,20,4,8,8,18,10,15,5,10,5,10,25,17]},{key:"Almost No Chance",values:[5,5,1,1,1,1,10,3,5,10,15,2,5,2,95,1,2,1,5,5,5,3,5,2,2,2,5,2,1,7,1,10,.05,5,2,2,1,7,1,5,1,5,2,1,2,5]},{key:"Highly Unlikely",values:[25,10,5,5,2,3,20,5,15,6,10,3,5,3,90,5,7,5,5,5,5,3,5,3,10,5,20,5,15,15,8,5,10,15,2,5,5,3,10,8,30,15,10,5,5,10]},{key:"Chances Are Slight",values:[25,5,15,15,10,20,30,10,10,25,15,5,15,5,35,10,5,40,10,10,5,13,5,10,20,5,10,5,15,30,15,12,5,30,30,5,10,13,10,10,15,20,10,5,10,15]}];var u=i(78995);let m={top:90,right:30,bottom:60,left:120},x=[-20,120],g=e=>{let{width:t,height:i,data:r}=e,a=(0,s.useRef)(null),o=t-m.right-m.left,l=i-m.top-m.bottom,h=r.map(e=>e.key),d=(0,s.useMemo)(()=>u.BYU().domain(x).range([10,o]).nice(),[r,t]);(0,s.useEffect)(()=>{let e=u.Ys(a.current);e.selectAll("*").remove();let t=u.LLu(d);e.append("g").attr("transform","translate(0,"+(l+20)+")").call(t)},[d,l]);let c=(0,s.useMemo)(()=>{var e;let t=(e=d.ticks(40),function(t){return e.map(function(e){return[e,u.J69(t,function(t){var i;return 1>=Math.abs(i=(e-t)/7)?.75*(1-i*i)/7:0})]})});return r.map(e=>({key:e.key,density:t(e.values)}))},[d,r]),p=Math.max(...c.map(e=>Math.max(...e.density.map(e=>e[1])))),g=u.BYU().domain([0,p]).range([100,0]);var j=u.tiA().domain(h).range([0,l]).paddingInner(1);let f=(0,s.useMemo)(()=>{let e=u.jvg().x(e=>d(e[0])).y(e=>g(e[1])).curve(u.$0Z);return c.map((t,i)=>{let s=e(t.density);return(0,n.jsx)("path",{d:s,transform:"translate(0,"+(j(t.key)-100)+")",fill:"purple",opacity:.8,stroke:"black",strokeWidth:.3,strokeLinejoin:"round"},i)})},[c]),y=(0,s.useMemo)(()=>c.map((e,t)=>(0,n.jsx)("text",{x:-5,y:j(e.key),textAnchor:"end",dominantBaseline:"middle",fontSize:10,children:e.key},t)),[c]);return(0,n.jsxs)("svg",{width:t,height:i,children:[(0,n.jsxs)("g",{width:o,height:l,transform:"translate(".concat([m.left,m.top].join(","),")"),children:[f,y]}),(0,n.jsx)("g",{width:o,height:l,ref:a,transform:"translate(".concat([m.left,m.top].join(","),")")})]})},j=e=>{let{width:t=700,height:i=400}=e;return(0,n.jsx)(g,{width:t,height:i,data:p})};var f=i(90505),y=i(77683),w=i(26820),v=i(52450);let b=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["A"," ",(0,n.jsx)("a",{href:"https://www.data-to-viz.com/graph/ridgeline.html",children:"ridgeline chart"})," ","is a chart type that shows the distribution of a numeric variable for several groups, stacked one of top of each other. This page is a step-by-step guide on how to build your own histogram for the web, using"," ",(0,n.jsx)("a",{href:"https://reactjs.org/",children:"React"})," and"," ",(0,n.jsx)("a",{href:"https://d3-graph-gallery.com/ridgeline.html",children:"D3.js"}),"."]}),(0,n.jsxs)("p",{children:["It starts by describing how the ",(0,n.jsx)("b",{children:"data"})," should be organized and how to initialize the ",(0,n.jsx)("b",{children:"ridgeline component"}),". It then quickly recalls how to compute and draw a ",(0,n.jsx)(c(),{href:"density-plot",children:"kernel density"}),", and shows how to ",(0,n.jsx)("b",{children:"stack"})," this information for several groups of a dataset. \uD83D\uDE47‍♂️."]})]});function k(){return(0,n.jsxs)(r.A,{title:"Ridgeline chart with React",seoDescription:"How to build a ridgeline plot with React and D3.js. A set of re-usable components coming with explanation and code.",children:[(0,n.jsx)(a.Z,{title:(0,n.jsxs)("h1",{children:["Ridgeline chart"," ",(0,n.jsx)("span",{className:"text-gray-600 font-light hidden sm:inline",children:"with React"})]}),description:b,chartType:"ridgeline"}),(0,n.jsx)("h2",{id:"data",children:"The Data"})," ",(0,n.jsxs)("p",{children:["To build a ridgeline chart, the input dataset must provide a set of",(0,n.jsx)("b",{children:"numeric values"})," for several groups."]}),(0,n.jsxs)("p",{children:["The best way to format this kind of information is with an"," ",(0,n.jsx)("b",{children:"array of object"}),". Each object represents a group. A",(0,n.jsx)("code",{children:"group"})," property provides the group name, and a"," ",(0,n.jsx)("code",{children:"values"})," property provides the values."]}),(0,n.jsx)("br",{}),(0,n.jsx)("p",{children:"Here is a minimal example of the data structure:"}),(0,n.jsx)(l.d,{code:T}),(0,n.jsx)("h2",{id:"skeleton",children:"Component skeleton"}),(0,n.jsxs)("p",{children:["The goal here is to create a ",(0,n.jsx)("code",{children:"Ridgeline"})," component that will be stored in a ",(0,n.jsx)("code",{children:"Ridgeline.tsx"})," file. This component requires 3 props to render: a ",(0,n.jsx)("code",{children:"width"}),", a ",(0,n.jsx)("code",{children:"height"}),", and some"," ",(0,n.jsx)("code",{children:"data"}),"."]}),(0,n.jsxs)("p",{children:["The shape of the ",(0,n.jsx)("code",{children:"data"})," is described above. The"," ",(0,n.jsx)("code",{children:"width"})," and ",(0,n.jsx)("code",{children:"height"})," will be used to render an"," ",(0,n.jsx)("code",{children:"svg"})," element in the DOM, in which we will insert the histogram."]}),(0,n.jsxs)("p",{children:["To put it in a nutshell, that's the skeleton of our"," ",(0,n.jsx)("code",{children:"Ridgeline"})," component:"]}),(0,n.jsx)(l.d,{code:A}),(0,n.jsxs)("p",{children:["It's fundamental to understand that with this code organization, d3.js will be used to prepare the SVG ",(0,n.jsx)("code",{children:"circle"}),", but it's React that will render them in the ",(0,n.jsx)("code",{children:"return()"})," statement. We won't use d3 methods like ",(0,n.jsx)("code",{children:"append"})," that you can find in usual"," ",(0,n.jsx)("a",{href:"https://www.d3-graph-gallery.com",children:"d3.js examples"}),"."]}),(0,n.jsx)("h2",{id:"kernel density",children:"Computing and plotting a density"}),(0,n.jsxs)("p",{children:["A ridgeline chart is a set of"," ",(0,n.jsx)(c(),{href:"density-plot",children:"density plots"}),", stacked one on top of each other. It is thus important to start by learning how to compute a"," ",(0,n.jsx)(c(),{href:"density-plot#kernel%20density",children:"kernel density"}),", and how to transform it in a SVG ",(0,n.jsx)("code",{children:"path"})," rendered with react."]}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(c(),{href:"/density-plot",children:"density chart"})," section of the gallery thoroughly explains how to compute this"," ",(0,n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Kernel_density_estimation",children:"density"})," ","estimation for a set of numeric values."]}),(0,n.jsx)("p",{children:"This is how the result looks like:"}),(0,n.jsx)(h.$,{VizComponent:y.p,vizName:"DensityChartWithAxis",maxWidth:600,height:400,caption:"A ridgeline chart is a set of densities stacked one on top of each other. This minimal example shows how to compute and plot this density for a single group."}),(0,n.jsx)("h2",{id:"stacking",children:"Stacking the densities"}),(0,n.jsx)("h3",{children:"→ Two Y scales"}),(0,n.jsx)("p",{children:"It's important to understand that 2 Y scales are necessary to compute a ridgeline chart."}),(0,n.jsxs)("p",{children:["The first one is used many times, to compute each density. It's a"," ",(0,n.jsx)("code",{children:"scaleLinear"})," scale."]}),(0,n.jsxs)("p",{children:["The second is used once to shift each group baseline and create the slight overlap. It's a ",(0,n.jsx)("code",{children:"scaleBand"}),": each band of the Y axis is dedicated to a group."]}),(0,n.jsxs)("p",{children:["You can read more about"," ",(0,n.jsx)("a",{href:"https://d3-graph-gallery.com/graph/custom_axis.html",children:"scales and axes"}),"."]}),(0,n.jsx)("h3",{children:"→ Axis"}),(0,n.jsxs)("p",{children:["It's important to display a X axis to understand what we are looking at. In the example below the ",(0,n.jsx)("code",{children:"axisBottom"})," imperative method of d3 is used in a ",(0,n.jsx)("code",{children:"useEffect"})," hook, but you can definitely create the axis using react like suggested"," ",(0,n.jsx)(c(),{href:"/build-axis-with-react",children:"here"}),"."]}),(0,n.jsxs)("p",{children:["For the Y axis labels, I suggest to add them using some"," ",(0,n.jsx)("code",{children:"text"})," svg elements."]}),(0,n.jsx)(h.$,{VizComponent:j,vizName:"RidgelineBasic",maxWidth:800,height:600,caption:(0,n.jsxs)("span",{children:["A ridgeline chart showing how various probability related words are perceived by humans. (",(0,n.jsx)("a",{href:"https://www.data-to-viz.com/graph/ridgeline.html",children:"more"}),")"]})}),(0,n.jsx)(f.r,{chartId:"ridgeline"}),(0,n.jsx)(w.Z,{chartId:"ridgeline"}),(0,n.jsx)("h2",{id:"variations",children:"Variations"}),(0,n.jsxs)("p",{children:["Ridgeline charts are not the only way to ",(0,n.jsx)("b",{children:"compare the distribution"})," ","of several groups in a dataset. ",(0,n.jsx)(c(),{href:"boxplot",children:"Boxplots"}),","," ",(0,n.jsx)(c(),{href:"violin-plot",children:"violins"}),","," ",(0,n.jsx)(c(),{href:"histogram",children:"histograms"})," and"," ",(0,n.jsx)(c(),{href:"density-plot",children:"densities"})," are variations that could interst you in order to solve this goal. Check the examples below to get the code."," "]})," ",(0,n.jsx)(v.Z,{images:["boxplot-jitter.png","violinBasic.png","boxplotBasic.png","histogram-small-multiple.png","histogram-with-several-groups.png","densityMultipleGroups.png"]}),(0,n.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,n.jsx)(o.Z,{chartFamily:"distribution"}),(0,n.jsx)("div",{className:"mt-20"})]})}let T='\nexport const data = [\n  {\n    group: "A",\n    values: [0, 0, 2, 2, 2, 0, 0, 1],\n  },\n  {\n    group: "B",\n    values: [19, 20, 19, 18, 18],\n  }\n];\n'.trim(),A='\nimport * as d3 from "d3"; // we will need d3.js\n\ntype RidgelineProps = {\n  width: number;\n  height: number;\n  data: number[];\n};\n\nexport const Ridgeline = ({ width, height, data }: RidgelineProps) => {\n\n  // read the data\n  // build the scales\n  // compute kernel densities for each group\n  // build all shapes\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        // render all the shapes\n      </svg>\n    </div>\n  );\n};\n'.trim()}},function(e){e.O(0,[2343,7754,8995,7823,8190,3710,2594,6588,693,5796,9774,2888,179],function(){return e(e.s=64925)}),_N_E=e.O()}]);