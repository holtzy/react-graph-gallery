(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1792],{55044:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/scatter-plot",function(){return n(19581)}])},90505:function(e,t,n){"use strict";n.d(t,{r:function(){return l}});var s=n(85893),i=n(41664),r=n.n(i),o=n(28843),a=n(66717),c=n(3572);let l=e=>{let{chartId:t}=e,n=o.c.filter(e=>e.id===t)[0].label;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h2",{id:"responsiveness",children:"Responsive "+n+" with react"}),(0,s.jsxs)("p",{children:["The component above is not responsive. It expects 2 props called"," ",(0,s.jsx)("code",{children:"width"})," and ",(0,s.jsx)("code",{children:"height"})," and will render a ",n," of those dimensions."]}),(0,s.jsxs)("p",{children:["Making the ",n," responsive requires adding a ",(0,s.jsx)("b",{children:"wrapper"})," component that gets the dimension of the parent ",(0,s.jsx)("code",{children:"div"}),", and listening to a potential dimension change. This is possible thanks to a hook called"," ",(0,s.jsx)("code",{children:"useDimensions"})," that will do the job for us."]}),(0,s.jsx)(a.U,{title:(0,s.jsxs)("span",{children:[(0,s.jsx)("code",{children:"useDimensions"}),": a hook to make your viz responsive"]}),children:(0,s.jsx)(c.d,{code:d})}),(0,s.jsxs)("p",{children:["I'm in the process of writing a complete blog post on the topic."," ",(0,s.jsx)(r(),{href:"/subscribe",children:"Subscribe to the project"})," to know when it's ready."]}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{})]})},d='\nexport const useDimensions = (targetRef: React.RefObject<HTMLDivElement>) => {\n\n  const getDimensions = () => {\n    return {\n      width: targetRef.current ? targetRef.current.offsetWidth : 0,\n      height: targetRef.current ? targetRef.current.offsetHeight : 0\n    };\n  };\n\n  const [dimensions, setDimensions] = useState(getDimensions);\n\n  const handleResize = () => {\n    setDimensions(getDimensions());\n  };\n\n  useEffect(() => {\n    window.addEventListener("resize", handleResize);\n    return () => window.removeEventListener("resize", handleResize);\n  }, []);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  return dimensions;\n}\n'.trim()},66717:function(e,t,n){"use strict";n.d(t,{U:function(){return i}});var s=n(85893);let i=e=>{let{title:t,children:n}=e;return(0,s.jsxs)("details",{className:"bg-gray-50 py-2 px-4 rounded-md my-2",children:[(0,s.jsx)("summary",{className:"cursor-pointer",children:t}),(0,s.jsx)("div",{className:"pt-4",children:n})]})}},19581:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return y}});var s=n(85893);n(67294);var i=n(80153),r=n(43710),o=n(61651),a=n(3572),c=n(81122),l=n(21202),d=n(32428),h=n(81341),p=n(90505),x=n(26820),u=n(66717),m=n(80002),j=n(41664),g=n.n(j),f=n(52450),b=n(14003);let w=(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["A ",(0,s.jsx)("a",{href:"https://www.data-to-viz.com/graph/scatter.html",children:"scatterplot"})," ","displays the relationship between 2 numeric variables. This page is a step-by-step guide on how to build your own scatterplot for the web, using"," ",(0,s.jsx)("a",{href:"https://reactjs.org/",children:"React"})," and"," ",(0,s.jsx)("a",{href:"https://www.d3-graph-gallery.com",children:"D3.js"}),"."]}),(0,s.jsxs)("p",{children:["It starts with very basic concepts like ",(0,s.jsx)("b",{children:"data structure"}),","," ",(0,s.jsx)("b",{children:"scales"})," and svg circle ",(0,s.jsx)("b",{children:"rendering"}),". It then shows how to add interactivity to the chart with ",(0,s.jsx)("b",{children:"hover effects"})," and ",(0,s.jsx)("b",{children:"tooltips"}),". At the end of the post, you should be able to build you own ready-to-publish scatterplot \uD83D\uDE47‍♂️."]})]});function y(){return(0,s.jsxs)(i.A,{title:"How to build a scatter plot with React and D3.",seoDescription:"A step-by-step guide to build your very own scatterplot from scratch. Comes with explanations, code sandboxes, and ready-to-use templates.",children:[(0,s.jsx)(r.Z,{title:(0,s.jsxs)("h1",{children:["Scatterplot"," ",(0,s.jsx)("span",{className:"text-gray-600 font-light hidden sm:inline",children:"with React and d3.js"})]}),description:w,chartType:"scatter"}),(0,s.jsx)("h2",{id:"data",children:"The Data"}),(0,s.jsxs)("p",{children:["The dataset used to build a scatterplot is usually an"," ",(0,s.jsx)("b",{children:"array of objects"}),"."]}),(0,s.jsxs)("p",{children:["For each object, at least 2 properties are required: ",(0,s.jsx)("code",{children:"x"})," and"," ",(0,s.jsx)("code",{children:"y"}),". The value of ",(0,s.jsx)("code",{children:"x"})," will control the position of the datapoint on the horizontal axis. The value of ",(0,s.jsx)("code",{children:"y"})," will be linked with the vertical axis."]}),(0,s.jsx)(a.d,{code:v}),(0,s.jsxs)("p",{children:["We will see later in this guide that some additional properties can become useful. For instance, a third numeric value could be added as a"," ",(0,s.jsx)("code",{children:"size"})," property, and a categorical property could be used as a ",(0,s.jsx)("code",{children:"group"})," to control the ",(0,s.jsx)("b",{children:"color"}),"."]}),(0,s.jsxs)("p",{children:["This tutorial starts by using dummy data for the most simple examples. It then uses the famous"," ",(0,s.jsx)("a",{href:"https://www.data-to-viz.com/story/ThreeNum.html",children:"gapminder"})," ","dataset that provides the ",(0,s.jsx)("b",{children:"life expectancy"})," and the"," ",(0,s.jsx)("b",{children:"population size"})," for every country."]}),(0,s.jsx)("h2",{id:"skeleton",children:"Component skeleton"}),(0,s.jsxs)("p",{children:["The goal here is to create a ",(0,s.jsx)("code",{children:"Scatterplot"})," component that will be stored in a ",(0,s.jsx)("code",{children:"Scatterplot.tsx"})," file. This component requires 3 props to render: a ",(0,s.jsx)("code",{children:"width"}),", a ",(0,s.jsx)("code",{children:"height"}),", and some ",(0,s.jsx)("code",{children:"data"}),"."]}),(0,s.jsxs)("p",{children:["The shape of the ",(0,s.jsx)("code",{children:"data"})," is described above. The"," ",(0,s.jsx)("code",{children:"width"})," and ",(0,s.jsx)("code",{children:"height"})," will be used to rendering a"," ",(0,s.jsx)("code",{children:"svg"})," element in the DOM, in which we will insert the scatterplot."]}),(0,s.jsxs)("p",{children:["To put it in a nutshell, that's the skeleton of our"," ",(0,s.jsx)("code",{children:"Scatterplot"})," component:"]}),(0,s.jsx)(a.d,{code:z}),(0,s.jsxs)("p",{children:["It's fundamental to understand that with this code organization, d3.js will be used to prepare the svg ",(0,s.jsx)("code",{children:"circle"}),", but it's react that will render them in the ",(0,s.jsx)("code",{children:"return()"})," statement. We won't use d3 methods like ",(0,s.jsx)("code",{children:"append"})," that you can find in usual"," ",(0,s.jsx)("a",{href:"https://www.d3-graph-gallery.com",children:"d3.js examples"}),"."]}),(0,s.jsx)("h2",{id:"scales and axes",children:"Scales and axes"}),(0,s.jsx)("h3",{children:"→ Scales"}),(0,s.jsxs)("p",{children:["Building a scatterplot requires to transform a ",(0,s.jsx)("b",{children:"dimension"})," (a numeric variable like life expectancy) in a ",(0,s.jsx)("b",{children:"position in pixels"}),". This is done using a fundamental dataviz concept called ",(0,s.jsx)("b",{children:"scale"}),"."]}),(0,s.jsxs)("p",{children:["D3.js comes with a handful set of"," ",(0,s.jsx)("a",{href:"https://github.com/d3/d3-scale",children:"predefined scales"}),"."," ",(0,s.jsx)("code",{children:"scaleLinear"})," is what we need for the X and Y axis. Here is a quick overview on how to build and use a scale:"]}),(0,s.jsx)(a.d,{code:D}),(0,s.jsxs)("p",{children:["To dig more into d3 scales, visit this"," ",(0,s.jsx)("a",{href:"https://d3-graph-gallery.com/graph/custom_axis.html",children:"dedicated page"}),". It's a crucial concept that will be used everywhere in this website."]}),(0,s.jsx)("h3",{children:"→ Axes"}),(0,s.jsxs)("p",{children:["Axes are rather complicated elements. They are composed of the main"," ",(0,s.jsx)("b",{children:"segment"}),", several ",(0,s.jsx)("b",{children:"ticks"})," that each have a ",(0,s.jsx)("b",{children:"label"}),", and are often decorated with a ",(0,s.jsx)("b",{children:"title"}),"."]}),(0,s.jsxs)("p",{children:["D3.js offers some powerful"," ",(0,s.jsx)("a",{href:"https://d3-graph-gallery.com/graph/custom_axis.html",children:"functions"})," ","to draw those axes for you, based on the scales discussed above. For instance, one could call ",(0,s.jsx)("code",{children:"axisBottom()"})," in a"," ",(0,s.jsx)("code",{children:"useEffect"})," hook to imperatively draw the X axis into a specific DOM element. But this comes with some caveats and is thus not the option used in this gallery."]}),(0,s.jsxs)("p",{children:["Instead, I suggest creating the axes from scratch and storing them in 2 react components called ",(0,s.jsx)("code",{children:"AxisBottom"})," and"," ",(0,s.jsx)("code",{children:"AxisLeft"}),". Those components expect a d3 scale as input and do all the svg drawing for us."]}),(0,s.jsx)(c.$,{VizComponent:h.c,vizName:"AxisBasic",maxWidth:500,height:300,caption:(0,s.jsx)("p",{children:"Compute scales to map numeric values to a 2d canvas. Use custom react components to render axes with react from this scales."})}),(0,s.jsxs)("p",{children:["The code for those X and Y axis components is provided below. The following examples will show how straightforward it is to tweak them to reach other ",(0,s.jsx)("b",{children:"chart styles"}),"."]}),(0,s.jsx)(u.U,{startOpen:!1,title:"code for the X axis react component",children:(0,s.jsx)(a.d,{code:k})}),(0,s.jsx)(u.U,{startOpen:!1,title:"code for the Y axis react component",children:(0,s.jsx)(a.d,{code:T})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("u",{children:"Note"}),": do not forget to use the ",(0,s.jsx)("code",{children:"crispEdges"})," value of the ",(0,s.jsx)("code",{children:"shape-rendering"})," svg attribute. Otherwise the vertical and horizontal segments might be blurry."]}),(0,s.jsx)("h2",{id:"circles",children:"Add circles"}),(0,s.jsxs)("p",{children:["We are now pretty close to the first scatterplot. There is just one more critical part missing: ",(0,s.jsx)("b",{children:"markers"}),"."]}),(0,s.jsxs)("p",{children:["To add them, we have to ",(0,s.jsx)("code",{children:"map()"})," on the data input and add an svg ",(0,s.jsx)("code",{children:"circle"})," for each. That's the code snippet that needs to be added:"]}),(0,s.jsx)(a.d,{code:S}),(0,s.jsxs)("p",{children:[(0,s.jsx)("b",{children:"That's it!"})," \uD83C\uDF89"]}),(0,s.jsxs)("p",{children:["Calling the ",(0,s.jsx)("code",{children:"allShapes"})," object in the ",(0,s.jsx)("code",{children:"return()"})," ","statement of the component will add as many circles as needed."]}),(0,s.jsxs)("p",{children:["Note that styling attributes are written as prop here. In production, you should consider adding a ",(0,s.jsx)("code",{children:"class"})," to those circles and setting it using css."]}),(0,s.jsx)(c.$,{VizComponent:l.C,vizName:"ScatterplotBasic",maxWidth:500,height:500,caption:"Add a svg circle for each item of the dataset to get a first scatterplot"}),(0,s.jsxs)("p",{children:["That's not the best scatterplot in the world yet, but it's definitely a"," ",(0,s.jsx)("b",{children:"first working version"}),"."]}),(0,s.jsx)(p.r,{chartId:"scatter"}),(0,s.jsx)("h2",{id:"tooltip",children:"Tooltip"}),(0,s.jsxs)("p",{children:["There is a very common ",(0,s.jsx)("b",{children:"frustration"})," with scatterplots: you're interested in a specific data point (let's say it's out of the general trend for instance), but you ",(0,s.jsx)("b",{children:"ignore everything"})," about this item."]}),(0,s.jsx)("p",{children:"This is when tooltips come into play. You can add as much information as you want to it, making the chart much more insightful."}),(0,s.jsxs)("p",{children:["In the following chart based on the"," ",(0,s.jsx)("a",{href:"https://www.data-to-viz.com/story/ThreeNum.html",children:"gapminder"})," ","dataset, don't you want to know what are the countries with the highest life expectancy or GDP per capita? Labeling all circles would result in a very ",(0,s.jsx)("b",{children:"cluttered"})," figure, so let's learn how to add tooltips instead."]}),(0,s.jsx)(c.$,{VizComponent:m.x,vizName:"ScatterplotTooltip",maxWidth:500,height:500,caption:"Scatterplot with tooltip. Hover over a circle to get the corresponding country name."}),(0,s.jsxs)("p",{children:["There are ",(0,s.jsx)("b",{children:"many different approaches"})," to building tooltips, and I'm"," ",(0,s.jsx)(g(),{href:"/subscribe",children:"preparing a whole dedicated blog post"})," on the topic."]}),(0,s.jsxs)("p",{children:["Here I suggest starting with an internal state using the"," ",(0,s.jsx)("code",{children:"useState"})," hook. ",(0,s.jsx)("code",{children:"interactionData"})," is an object providing everything you need to draw a tooltip. It usually has 2"," ",(0,s.jsx)("code",{children:"xPos"})," and ",(0,s.jsx)("code",{children:"yPos"})," properties that are the position of the tooltip. It then has as many props as needed to fill the tooltip. (I'm just adding the country name in my example)"]}),(0,s.jsx)(a.d,{code:N}),(0,s.jsxs)("p",{children:[(0,s.jsx)("code",{children:"setInteractiondata"})," is a function allowing to update this state. We can use it on each circle to update"," ",(0,s.jsx)("code",{children:"interactionData"})," each time it is hovered over:"]}),(0,s.jsx)(a.d,{code:C}),(0,s.jsxs)("p",{children:["We can now create a ",(0,s.jsx)("code",{children:"Tooltip"})," component that will render only when the ",(0,s.jsx)("code",{children:"interactionData"})," is not ",(0,s.jsx)("code",{children:"null"}),". It is usually more convenient to render the tooltip using ",(0,s.jsx)("code",{children:"html"}),", not ",(0,s.jsx)("code",{children:"svg"})," (it is easier to customize it)."]}),(0,s.jsxs)("p",{children:["To do so, the tooltip is rendered in an ",(0,s.jsx)("code",{children:"absolute"})," positioned div that is drawn exactly on top of the chart area, excluding axes. This is how to ",(0,s.jsx)("code",{children:"return"})," statement of our ",(0,s.jsx)("code",{children:"Scatterplot"})," ","component now looks like:"]}),(0,s.jsx)(a.d,{code:I}),(0,s.jsxs)("p",{children:["Now you can add whatever content in the ",(0,s.jsx)("code",{children:"Tooltip"})," component. Check the code below the example above to see an example."]}),(0,s.jsxs)("p",{className:"text-gray-400",children:["This was a rather succint explanation on tooltips. A more"," ",(0,s.jsx)(g(),{href:"/subscribe",children:"in-depth explanation"})," will be published soon."]}),(0,s.jsx)("h2",{id:"hover effect",children:"Hover effect"}),(0,s.jsxs)("p",{children:["Showing a tooltip on hover is helpful, but it's often a nice touch to add a ",(0,s.jsx)("b",{children:"hover effect"}),". Hover effects on scatterplots are usually used for 2 main reasons:"]}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Highlight ",(0,s.jsx)("b",{children:"one circle"}),": makes sure the tooltip you're reading is associated with the circle you're targeting."]}),(0,s.jsxs)("li",{children:["Highlight ",(0,s.jsx)("b",{children:"a group"}),": it's often interesting to see all the related points in the dataset."]})]}),(0,s.jsx)("p",{children:"Let's implement both on the chart below. Hovering over a country will fade all circles except the ones of the same continent."}),(0,s.jsx)(c.$,{VizComponent:b.P,vizName:"ScatterplotHoverHighlight",maxWidth:500,height:500,caption:"Scatterplot with hover effect: hover over a circle to highlight it and its group"}),(0,s.jsxs)("p",{children:["As for the tooltip example above, everything starts with an internal state (called ",(0,s.jsx)("code",{children:"hoveredGroup"}),") that stores which circle is hovered hover."]}),(0,s.jsx)(a.d,{code:A}),(0,s.jsxs)("p",{children:["Now, this state needs to be updated when a user hovers over the circle."," ",(0,s.jsx)("code",{children:"setHoveredGroup"})," can be passed as a callback to the"," ",(0,s.jsx)("code",{children:"onMouseOver"})," attribute of each circle."]}),(0,s.jsxs)("p",{children:["On top of this, some specific css classes can be attributed to circles depending on the circle that is hovered hover. In the example above, a class called ",(0,s.jsx)("code",{children:"dimmed"})," is added to circles that must disappear."]}),(0,s.jsx)("p",{children:"To put it in a nutshell, the circles are created as follows:"}),(0,s.jsx)(a.d,{code:O}),(0,s.jsxs)("p",{children:["Last but not least, some css needs to be added to customize the circle depending on if they are in default, ",(0,s.jsx)("code",{children:".dimmed"})," or"," ",(0,s.jsx)("code",{children:":hover"})," mode."]}),(0,s.jsxs)("p",{children:["Note that the ",(0,s.jsx)("code",{children:"filter: saturate(0)"})," is a good way to dim unwanted circles. Also, playing with ",(0,s.jsx)("code",{children:"transition-delay"})," and"," ",(0,s.jsx)("code",{children:"transition-duration"})," adds to animate the transition is a nice touch you should consider. Check the code below the example to see the full css."]}),(0,s.jsxs)("p",{className:"text-gray-400 mt-8",children:["The hover effect is another big topic in data visualization. A dedicated post will be published soon on the topic, feel free to"," ",(0,s.jsx)(g(),{href:"/subscribe",children:"subscribe"})," to know when."]}),(0,s.jsx)(x.Z,{chartId:"scatter"}),(0,s.jsx)("h2",{id:"real life",children:"Real-life application"}),(0,s.jsx)("p",{children:"Let's apply the concepts learned above to a real-life example."}),(0,s.jsxs)("p",{children:["I like this scatterplot originally published on the data wrapper"," ",(0,s.jsx)("a",{href:"https://blog.datawrapper.de/climate-risk-readiness-responsibility/",children:"blog"}),". It shows a strong correlation between vulnerability to climate change and CO2 emissions."]}),(0,s.jsx)("br",{}),(0,s.jsx)("p",{children:"The chart has several features that are interesting to reproduce fom a technical point of view:"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Custom ",(0,s.jsx)("b",{children:"annotation"}),": only a fraction of the country names are written"]}),(0,s.jsx)("li",{children:"Hover effect: the hovered country is highlighted with a black stroke. After a short delay, countries of other groups are dimmed. Note that the effect is triggered once the mouse approaches the marker, no need to be perfectly on top."}),(0,s.jsx)("li",{children:"Tooltip: highly customized and linked to the mouse position"})]}),(0,s.jsx)(c.$,{VizComponent:d.z,vizName:"ScatterplotClimateCrisis",maxWidth:700,height:900,caption:(0,s.jsxs)("span",{children:["Reproduction of a chart originally published by"," ",(0,s.jsx)("a",{href:"https://blog.datawrapper.de/climate-risk-readiness-responsibility/",children:"Data Wrapper"})," ","using react and d3.js."]})}),(0,s.jsx)("h2",{id:"variations",children:"Variations"}),(0,s.jsxs)("p",{children:["The scatterplot examples described above are just the ",(0,s.jsx)("b",{children:"beginning"})," ","of your journey. There is an infinite world of customization that is open to you. You can also explore"," ",(0,s.jsx)(g(),{href:"/",children:"related chart types"})," that can be a good fit for your data:"]}),(0,s.jsx)("p",{children:"Click on the overview below to get details and code."}),(0,s.jsx)("br",{}),(0,s.jsx)(f.Z,{images:["bubble-plot-with-legend.png","2d-density-plot.png","correlogramBasic.png","scatterplot-tooltip-with-voronoi-for-closest-point-detection.gif","scatterplot-basic-canvas.png","timeseries-moving-average.png","scatterplot-r2-draggable.png"]}),(0,s.jsx)("h2",{children:"Useful links"}),(0,s.jsx)("p",{children:"The following links have been useful to create this page:"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("i",{children:"Building axes in d3.js"})," and the ",(0,s.jsx)("i",{children:"scatterplot section"})," from the"," ",(0,s.jsx)("a",{href:"https://d3-graph-gallery.com/graph/custom_axis.html",children:"d3 graph gallery"})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("a",{href:"https://github.com/d3/d3-scale",children:"Official doc"})," about scales."," "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("i",{children:"Using React with D3.js"})," on Amelia Wattenberger's"," ",(0,s.jsx)("a",{href:"https://wattenberger.com/blog/react-and-d3",children:"blog"}),"."]}),(0,s.jsxs)("li",{children:["This"," ",(0,s.jsx)("a",{href:"https://stackoverflow.com/questions/49058890/how-to-get-a-react-components-size-height-width-before-render",children:"stack overflow discussion"})," ","about react component's size."]})]}),(0,s.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,s.jsx)(o.Z,{chartFamily:"correlation"}),(0,s.jsx)("div",{className:"mt-20"})]})}let v="\nconst data = [\n  {\n    x: 2,\n    y: 4\n  },\n  {\n    x: 8,\n    y: 5\n  }\n]\n".trim(),k='\nimport { useMemo } from "react";\nimport { ScaleLinear } from "d3";\n\ntype AxisBottomProps = {\n  xScale: ScaleLinear<number, number>;\n  pixelsPerTick: number;\n};\n\n// tick length\nconst TICK_LENGTH = 6;\n\nexport const AxisBottom = ({ xScale, pixelsPerTick }: AxisBottomProps) => {\n  const range = xScale.range();\n\n  const ticks = useMemo(() => {\n    const width = range[1] - range[0];\n    const numberOfTicksTarget = Math.floor(width / pixelsPerTick);\n\n    return xScale.ticks(numberOfTicksTarget).map((value) => ({\n      value,\n      xOffset: xScale(value),\n    }));\n  }, [xScale]);\n\n  return (\n    <>\n      {/* Main horizontal line */}\n      <path\n        d={["M", range[0], 0, "L", range[1], 0].join(" ")}\n        fill="none"\n        stroke="currentColor"\n      />\n\n      {/* Ticks and labels */}\n      {ticks.map(({ value, xOffset }) => (\n        <g key={value} transform={\'translate(${xOffset}, 0)\'}>\n          <line y2={TICK_LENGTH} stroke="currentColor" />\n          <text\n            key={value}\n            style={{\n              fontSize: "10px",\n              textAnchor: "middle",\n              transform: "translateY(20px)",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n'.trim(),T='\nimport { useMemo } from "react";\nimport { ScaleLinear } from "d3";\n\ntype AxisLeftProps = {\n  yScale: ScaleLinear<number, number>;\n  pixelsPerTick: number;\n  width: number;\n};\n\nconst TICK_LENGTH = 10;\n\nexport const AxisLeft = ({ yScale, pixelsPerTick, width }: AxisLeftProps) => {\n  const range = yScale.range();\n\n  const ticks = useMemo(() => {\n    const height = range[0] - range[1];\n    const numberOfTicksTarget = Math.floor(height / pixelsPerTick);\n\n    return yScale.ticks(numberOfTicksTarget).map((value) => ({\n      value,\n      yOffset: yScale(value),\n    }));\n  }, [yScale]);\n\n  return (\n    <>\n      {/* Ticks and labels */}\n      {ticks.map(({ value, yOffset }) => (\n        <g\n          key={value}\n          transform={"translate(0, {yOffset})"} // TODO struggling with back ticks\n          shapeRendering={"crispEdges"}\n        >\n          <line\n            x1={-TICK_LENGTH}\n            x2={width + TICK_LENGTH}\n            stroke="#D2D7D3"\n            strokeWidth={0.5}\n          />\n          <text\n            key={value}\n            style={{\n              fontSize: "10px",\n              textAnchor: "middle",\n              transform: "translateX(-20px)",\n              fill: "#D2D7D3",\n            }}\n          >\n            {value}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n'.trim(),S='\nconst allShapes = data.map((d, i) => {\n  return (\n    <circle\n      key={i}\n      r={7} // radius\n      cx={xScale(d.x)} // position on the X axis\n      cy={yScale(d.y)} // on the Y axis\n      opacity={1}\n      stroke="#cb1dd1"\n      fill="#cb1dd1"\n      fillOpacity={0.2}\n      strokeWidth={1}\n    />\n  );\n});\n'.trim(),D="\nconst scale = d3.scaleLinear()\n  .domain([0, 10]) // data goes from 0 to 10\n  .range([0, 200]); // axis goes from 0 to 200\n\nscale(0); // 0 -> item with a value of 0 will be at the extreme left of the axis\nscale(5); // 100 -> middle of the axis\nscale(10); // 200 -> extreme right\n".trim(),z='\nimport * as d3 from "d3"; // we will need d3.js\n\ntype ScatterplotProps = {\n  width: number;\n  height: number;\n  data: { x: number; y: number }[];\n};\n\nexport const Scatterplot = ({ width, height, data }: ScatterplotProps) => {\n\n  // read the data\n  // do some stuff with d3\n  // compute all the <circle>\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        // render all the <circle>\n      </svg>\n    </div>\n  );\n};\n'.trim(),N="\nconst [interactionData, setInteractiondata] = useState<InteractionData | null>(null);\n".trim(),C="\n<circle\n  r={8}\n  cx={xScale(d.x)}\n  cy={yScale(d.y)}\n  onMouseEnter={() => // Each time the circle is hovered hover...\n    setInteractionData({ // ... update the interactionData state with the circle information\n      xPos: xScale(d.x),\n      yPos: yScale(d.y),\n      name: d.subGroup,\n    })\n  }\n  onMouseLeave={() => setInteractionData(null)} // When the user stops hovering, reset the interactionData to null\n/>\n".trim(),I='\nreturn (\n  <div style={{ position: "relative" }}>\n    <svg width={width} height={height}>\n      // axes and circles go here\n    </svg>\n\n    {/* Tooltip */}\n    <div\n      style={{\n        width: boundsWidth, // the width of the chart area excluding axes = width - left margin\n        height: boundsHeight,\n        position: "absolute",\n        top: 0,\n        left: 0,\n        pointerEvents: "none",\n        marginLeft: MARGIN.left,\n        marginTop: MARGIN.top,\n      }}\n    >\n      <Tooltip interactionData={interactionData} />\n    </div>\n'.trim(),A="\nconst [hoveredGroup, setHoveredGroup] = useState<string | null>(null);\n".trim(),O='\nconst allShapes = data.map((d, i) => {\n  const className = // class if the circle depends on the hover state\n    hoveredGroup && d.group !== hoveredGroup\n      ? styles.scatterplotCircle + " " + styles.dimmed\n      : styles.scatterplotCircle;\n\n  return (\n    <circle\n      key={i}\n      r={5}\n      cx={xScale(d.x)}\n      cy={yScale(d.y)}\n      className={className} // class is attributed here\n      stroke={colorScale(d.group)}\n      fill={colorScale(d.group)}\n      onMouseOver={() => setHoveredGroup(d.group)} // callback to update the state\n      onMouseLeave={() => setHoveredGroup(null)} // and to set it back to null\n    />\n  );\n});\n'.trim()},34699:function(e,t,n){"use strict";n.d(t,{X:function(){return d}});var s=n(85893),i=n(52604);let r=e=>{let{width:t,height:n}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("defs",{children:(0,s.jsx)("pattern",{id:"pattern_rkDsm",patternUnits:"userSpaceOnUse",width:"9.5",height:"2.5",patternTransform:"rotate(41)",children:(0,s.jsx)("line",{x1:"0",y:"0",x2:"0",y2:"9.5",stroke:"#D9B9F3",strokeWidth:"1"})})}),(0,s.jsx)("rect",{width:t,height:n,fill:"url(#pattern_rkDsm)",opacity:"1"})]})};var o=n(67294);let a=e=>{let{xScale:t,pixelsPerTick:n}=e,i=t.range(),r=(0,o.useMemo)(()=>{let e=i[1]-i[0];return t.ticks(Math.floor(e/n)).map(e=>({value:e,xOffset:t(e)}))},[t]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("path",{d:["M",i[0],0,"L",i[1],0].join(" "),fill:"none",stroke:"currentColor"}),r.map(e=>{let{value:t,xOffset:n}=e;return(0,s.jsxs)("g",{transform:"translate(".concat(n,", 0)"),children:[(0,s.jsx)("line",{y2:6,stroke:"currentColor"}),(0,s.jsx)("text",{style:{fontSize:"10px",textAnchor:"middle",transform:"translateY(20px)"},children:t},t)]},t)})]})},c=e=>{let{yScale:t,pixelsPerTick:n}=e,i=t.range(),r=i[0]-i[1];return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("path",{d:["M",0,i[0],"L",0,i[1]].join(" "),fill:"none",stroke:"currentColor"}),t.ticks(Math.floor(r/n)).map((e,n)=>(0,s.jsxs)("g",{transform:"translate(0, ".concat(t(e),")"),children:[(0,s.jsx)("line",{x2:-6,stroke:"currentColor"}),(0,s.jsx)("text",{style:{fontSize:"10px",textAnchor:"middle",transform:"translateX(-20px)"},children:e},e)]},e))]})},l={top:30,right:30,bottom:50,left:50},d=e=>{let{width:t,height:n}=e,o=t-l.right-l.left,d=n-l.top-l.bottom,h=i.BYU().domain([0,10]).range([0,o]),p=i.BYU().domain([0,11]).range([d,0]);return i.p2C().domain([1e-24,10]).range(["red","blue"]).clamp(!0),(0,s.jsx)("div",{children:(0,s.jsx)("svg",{width:t,height:n,shapeRendering:"crispEdges",children:(0,s.jsxs)("g",{width:o,height:d,transform:"translate(".concat([l.left,l.top].join(","),")"),overflow:"visible",children:[(0,s.jsx)(r,{width:o,height:d}),(0,s.jsx)(c,{yScale:p,pixelsPerTick:30}),(0,s.jsx)("g",{transform:"translate(0, ".concat(d,")"),children:(0,s.jsx)(a,{xScale:h,pixelsPerTick:60})})]})})})}},81341:function(e,t,n){"use strict";n.d(t,{c:function(){return r}});var s=n(85893),i=n(34699);let r=e=>{let{width:t=700,height:n=400}=e;return(0,s.jsx)(i.X,{width:t,height:n})}},21202:function(e,t,n){"use strict";n.d(t,{C:function(){return h}});var s=n(85893);let i=[{x:2,y:4},{x:3,y:5},{x:1,y:2},{x:5,y:5},{x:7,y:8},{x:9,y:9},{x:6,y:8},{x:5,y:4},{x:7,y:5},{x:8,y:9},{x:6,y:9},{x:3,y:6},{x:2,y:1}];var r=n(52604),o=n(67294);let a=e=>{let{yScale:t,pixelsPerTick:n,width:i}=e,r=t.range(),a=(0,o.useMemo)(()=>{let e=r[0]-r[1];return t.ticks(Math.floor(e/n)).map(e=>({value:e,yOffset:t(e)}))},[t]);return(0,s.jsx)(s.Fragment,{children:a.map(e=>{let{value:t,yOffset:n}=e;return(0,s.jsxs)("g",{transform:"translate(0, ".concat(n,")"),shapeRendering:"crispEdges",children:[(0,s.jsx)("line",{x1:-10,x2:i+10,stroke:"#D2D7D3",strokeWidth:.5}),(0,s.jsx)("text",{style:{fontSize:"10px",textAnchor:"middle",transform:"translateX(-20px)",fill:"#D2D7D3"},children:t},t)]},t)})})},c=e=>{let{xScale:t,pixelsPerTick:n,height:i}=e,r=t.range(),a=(0,o.useMemo)(()=>{let e=r[1]-r[0];return t.ticks(Math.floor(e/n)).map(e=>({value:e,xOffset:t(e)}))},[t]);return(0,s.jsx)(s.Fragment,{children:a.map(e=>{let{value:t,xOffset:n}=e;return(0,s.jsxs)("g",{transform:"translate(".concat(n,", 0)"),shapeRendering:"crispEdges",children:[(0,s.jsx)("line",{y1:10,y2:-i-10,stroke:"#D2D7D3",strokeWidth:.5}),(0,s.jsx)("text",{style:{fontSize:"10px",textAnchor:"middle",transform:"translateY(20px)",fill:"#D2D7D3"},children:t},t)]},t)})})},l={top:60,right:60,bottom:60,left:60},d=e=>{let{width:t,height:n,data:i}=e,o=t-l.right-l.left,d=n-l.top-l.bottom,h=r.BYU().domain([0,10]).range([d,0]),p=r.BYU().domain([0,10]).range([0,o]),x=i.map((e,t)=>(0,s.jsx)("circle",{r:13,cx:p(e.y),cy:h(e.x),opacity:1,stroke:"#cb1dd1",fill:"#cb1dd1",fillOpacity:.2,strokeWidth:1},t));return(0,s.jsx)("div",{children:(0,s.jsx)("svg",{width:t,height:n,children:(0,s.jsxs)("g",{width:o,height:d,transform:"translate(".concat([l.left,l.top].join(","),")"),children:[(0,s.jsx)(a,{yScale:h,pixelsPerTick:40,width:o}),(0,s.jsx)("g",{transform:"translate(0, ".concat(d,")"),children:(0,s.jsx)(c,{xScale:p,pixelsPerTick:40,height:d})}),x]})})})},h=e=>{let{width:t=700,height:n=400}=e;return(0,s.jsx)(d,{data:i,width:t,height:n})}}},function(e){e.O(0,[2343,7754,2604,7823,8190,3710,2594,6588,693,2428,2,9381,9774,2888,179],function(){return e(e.s=55044)}),_N_E=e.O()}]);